# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14FKAByT83AlrBWhBRwGScP1Esx7r_c5E
"""

# 강의목표 -> 판다스로 간단한 데이터전처리, 전처리데이터 시각화
# 왜 사용? 데이터분석 : 문제정의 -> 데이터수집 -> 데이터전처리(가공) -> 시각화/학습에 사용함(ai/ml) -> 인사이트 도출.
# 판다스는 데이터전처리를 위해 사용됨.
# 왜 엑셀이있는데 판다스 쓰는지,, :
#   1) 수식연산 빠름(numpy로 만들어져서 빠르게 연산되는 라이브러리 존재)
#   2) 대용량 데이터 처리 가능
#   3) 중요개념 : 파이썬코드로 되어있어서.. 시각화/학습에 바로 활용 가능
#   4) 누락된 데이터(결측치) 처리 용이

import pandas as pd #shift+enter

dates = pd.date_range('20190301', periods=6) #날짜, 일수를 넣으면 값 반환 (결측치 감소)

dates

import numpy as np

#1. data frame만들기 (2차원형태의 테이블)
df = pd.DataFrame(np.random.randn(6,4), index = dates, columns=['A','B','C','D']) #생성자의 함수는 대부분 대문자로 시작

df

np.random.randn(6,4) # 랜덤한 값을 채워서 6행4열의 테이블을 만듦, index=dates : 행의값 채우기, columns=['a','b' ...] 열의 값 채우기

type(df)

df.columns

df.index

df.values

#2. data frame 요약하기 (통계나 평균 구할 때 쉽게해보기)
df.describe() # 카운트, 평균, 표준편차, 최소값, 25%, 50%, 75%, 최대값을 요약해줌

#3. data frame 정렬하기 -> 
df.sort_values(by='A') #df의 값을 A기준으로 오름차순정렬

df.sort_values(by='A', ascending=False) #내림차순 정렬

#4. data frame의 값을 조회하기
df['A']

#A열의 특정 날을 조회하기 (index는 쓸 수 없고 Columns만 쓸 수 있음)
#인덱싱.슬라이싱
list1 = [1,2,3,4]
list1[2] #인덱싱 : 특정 위치 지정해서 값 가져오기 (2번째값 접근)
list1[1:3] #슬라이싱 : 시작이상 ~끝 미만값 가져오기

df[0:5] #먼가 헷갈림; -> 해결책 있음 머냐면... df.logc[어쩌구]

df.loc['2019-03-01']
df.loc['2019-03-01',['A','B']] #이렇게 loc을 이용하여 행과 열을 가져올 수 있당
df.loc['2019-03-01':'2019-03-03','A':'D']

# iloc(index)
df.iloc[0:4] #이름이 아닌 인덱스(숫자기반)로 가져올 수 있는 iloc
df.iloc[0,0]
df.iloc[0:2, 0:2]

#1. DataFrame 생성. -> DataFrame()
#2. DataFrame 요약 -> discribe()
#3. DataFrame 정렬 -> sort_values()
#4. DataFrame 조회 -> df['A'] / df[0] / df.loc['2019-03-01', 'A'] / df.iloc[0,2]

#5. 데이터프레임(시리즈)에서 비교연산시 각 값들과 다 비교해서 결과값을 저장한 시리즈로 반환받음
df['A'] > 0
df > 0

df[df['A']>0] # 데이터프레임값에 시리즈를 넣으면 TRUE인값만 반환해줌 (조건문이지만 시리즈가 들어간것..?)

df[[True, True, False, True, True, True]] #데이터프레임에 []를 열고, 그안에 true/false로 이루어진 값을 넣으몀 true인 행만 남길 수 있다.

#columns의 순서를 바꾸고싶다면,,,
#pd.DataFrame(df, columns=['A','C','B','D'])
df

#열추가하기(세로축)
df['E'] = [1,2,3,4,5,6]
df

#df['E'] = np.nan
df['F'] = df['A']+df['E']
df.loc['2019-03-01', 'A'] = 0

df

#디테일한 수정 1. 하나의 행 하나의 열 값을 바꿈
df.loc['2019-03-02',['B','C']] = 1

df

#디테일한 수정 2. 하나의 행 두개의 열 값을 바꿈
df.loc['2019-03-02',['B','C']] = [1,2] #리스트로 넣으면 디테일하게 원하는 값을 바꿀 수 있다.

#디테일한 수정 3. 하나의 행 두개의 열 값을 바꿈
df.loc[['2019-03-02','2019-03-03'],['B','C']] = [[1,2],[3,4]] #이중리스트로만듦
df

df.iloc[[2,3],[1,2]] = [[9,9],[10,10]]
df

#A열에 1을 더한 컬럼 추가
df['A+1'] = df['A'] + 1
df

#A열과 B열을 더하고 싶으면
df['A+B'] = df['A'] + df['B']
df

pip install xlrd==1.2.0 ##엑셀파일 불러오기 전 설치

pd.read_excel("./서울.xls", header=1, usecols='C:K')

col_names = ['스트레스', '스트레스남학생', '스트레스여학생', '우울감경험률','우울남학생','우울여학생', '자살생각율','자살남학생','자살여학생'] #변수생성

raw_data = pd.read_excel("./서울.xls", header=1, usecols='C:K',names=col_names)

raw_data

raw_data.loc[1] = 100-raw_data.loc[0]
raw_data

raw_data['응답'] = ['그렇다','아니다']
raw_data
raw_data = raw_data.set_index('응답')
# raw_data를 직접적으로 변경시키는 명령어는 아님. 한번 보여주는 것이다. -> inplace를 하면 rawdata 한번보여줌 + 조작까지 하겠다.
raw_data

