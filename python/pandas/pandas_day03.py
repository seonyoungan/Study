# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15vToeQb5RLU_r6wHTHJUsb-NiAvhRSp0
"""

#2015.csv, 2019.csv 사용 (년도, 월별 아파트분양가, 형식이 다름)

#2013~2015년  2015년~2019년 분양가격 가져오기
#2015~2019년 데이터 전처리
#groupby, pivot_table를 사용해 데이터 집계하기
#pandas로 시각화
#seaborn으로 시각화하기
#2013~15년 데이터 전처리하기
#melt함수 사용해서 데이터 녹이기(펴서 늘린다는 느낌)
#연도/월을 분리하는 함수 만들기
#concat 함수를 이용해 2013~2015 / 2015~2019데이터 합치기

#!sudo apt-get install -y fonts-nanum
#!sudo fc-cache -fv
#!rm ~/.cache/matplotlib -rf

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rc('font', family="NanumBarunGothic")

df_first = pd.read_csv("./2015.csv", encoding='cp949')
df_last = pd.read_csv("./2019.csv", encoding='cp949')
df_first.info()

#결측치
df_last.isnull()
df_last.isnull().sum()

###데이터 타입 변환하기
#분양가격을 object해서 수치 데이터로 변경하기
#pd.to_numeric()
df_last['분양가격'] = pd.to_numeric(df_last['분양가격(㎡)'], errors='coerce')
df_last['분양가격']

###분양가격을 평당 분양 가격으로 바꾸기
df_last['평당분양가격'] = df_last['분양가격'] *3.3
df_last['평당분양가격']

###규모구분이 무엇일까
df_last['규모구분'].unique() #규모구분의 컬럼은 이 값들로만 있음

#1. 전용면적이라는 단어가 불필요하다
#2. 초과-> '~' 이하->''

###replace
df_last['전용면적'] = df_last['규모구분'].str.replace('전용면적','') #전용면적 컬럼 추가, replace(왼쪽, 오른쪽) 왼->오로 정확히 찾아 바뀜, 비슷한문자열은 앞에 str.
df_last['전용면적']

df_last['전용면적'] = df_last['전용면적'].str.replace('초과','~')
df_last['전용면적'] = df_last['전용면적'].str.replace('이하','')
df_last['전용면적'] = df_last['전용면적'].str.strip() #글자 앞뒤 공백 없애줌
df_last['전용면적']

df_last

# 필요없는 컬럼 지우기
df_last.info()

#drop으로 컬럼지우기..
df_last=df_last.drop(['규모구분', '분양가격(㎡)', '분양가격'], axis=1) #행을 지울껀지 열을 지울껀지 정하는 것

df_last.info()

#groupby로 집계하기
#1. 지역명으로 분양 가격의 평균을 구해보기
df_last.groupby(['지역명'])['평당분양가격'].mean() #각 지역의 평다 ㅇ가격을 모두 더해서 평균냄

#2. 전용면적으로 분양가격 평균 구하기
df_last.groupby(['전용면적'])['평당분양가격'].mean()

#3. 지역명, 전용면적으로 분양가격의 평균 구하기
df_last.groupby(['지역명','전용면적'])['평당분양가격'].mean() #index가 2개 되어 평당분양가격이 집계됨

#unstack()으로 2개의 인덱스로 되어있는 데이터프레임을 index, columns로 나누기
df_last.groupby(['지역명','전용면적'])['평당분양가격'].mean().unstack().round()

#4. 연도, 지역명으로 평당분양가격의 평균 구하기
g = df_last.groupby(['연도','지역명'])['평당분양가격'].mean()
g.loc[2018]

g.unstack()

g.unstack().transpose() #index와 columns의 위치를 뒤바꿔주는 기능

###pivot_table (groupby와 같은 역할을 함)
pd.pivot_table(df_last, index=['지역명'], values=['평당분양가격'], aggfunc="mean")

###pivot_table (groupby와 같은 역할을 함)
pd.pivot_table(df_last, index=['지역명'], values=['평당분양가격'], aggfunc="mean")

df_last.pivot_table(index="전용면적", columns="지역명", values="평당분양가격").round()

pd.pivot_table(df_last, index="전용면적", values="평당분양가격")

p = pd.pivot_table(df_last, index=["연도", "지역명"], values="평당분양가격")
p.loc[2017]

###시각화하기
g=df_last.groupby(['지역명'])['평당분양가격'].mean()
g.plot()

###정렬해서보기
g=df_last.groupby(['지역명'])['평당분양가격'].mean().sort_values(ascending=False)
g

g.plot.bar(rot=0, figsize=(10,3))

g=df_last.groupby(['전용면적'])['평당분양가격'].mean()
g.plot.bar(rot=30, figsize=(15,3))

#seaborn으로시각화하기
import seaborn as sns

#barploat으로 지역별 평당분양가격 그래프 그리기
plt.figure(figsize=(10,3))
sns.barplot(data=df_last, x='지역명',y='평당분양가격', ci=None)
#검정막대기 : 표준편차를 나타냄



#barplot으로 연도별 평당 분양가격 그려보기
sns.barplot(data=df_last, x='연도',y='평당분양가격', ci=None)



#sns.barplot(data=df_last, x='연도',y='평당분양가격', ci=None)
sns.catplot(data=df_last, x='연도', y='평당분양가격', kind='bar', col='지역명', col_wrap=4, ci=None)



#lineplot으로 연도별 평당분양가격 그려보기
plt.figure(figsize=(10,5))
sns.lineplot(data=df_last, x='연도', y='평당분양가격',hue='지역명')
plt.legend(bbox_to_anchor=(1.02,1), loc=2, borderaxespad=0)



#replot
#hue값을 한 그래프에 나타내는 것x -> 다른 그래프를 생성하여 나타낸다.
sns.relplot(data=df_last, x='연도', y='평당분양가격', kind='line', col='지역명', col_wrap=4, ci=None)

####수치데이터 히스토그램그리기
# 수치형 데이터분포형을 정확히 표현해주는 그래프
# 하나의 숫자 변수만 입력해야한다.
# bins : 변수를 n개의 bin으로 자른다.
b = df_last['평당분양가격'].hist(bins=10)

#distplot으로 히스토그램그리기
#distplot은 결측지가 있으면 에러가 난다.
price = df_last.loc[df_last['평당분양가격'].notnull(), '평당분양가격'] #어떤열을쓸건지도 적어주어야함
price

sns.distplot(price)

#kde, rug
#kde(kernal, density) -> 함수를 겹치는 방법으로 히스토그램보다 부드러운 곡선을 그린다.
#rug(실수 분포 플롯) -> 자료의 분포를 묘사하기 위해 사용됨
sns.kdeplot(price, shade=True)
sns.rugplot(price)

sns.displot(price, kde=True, rug=True)

sns.displot(data=df_last, x='평당분양가격', kde=True, rug=True, hue='전용면적')

sns.displot(data=df_last, x='평당분양가격', kde=True, rug=True, hue='전용면적', col='전용면적', col_wrap=1, aspect=2)

#subplot으로 여러개 그려보기
g = sns.FacetGrid(df_last, row='지역명', height=1.7, aspect=4)
g.map(sns.kdeplot, '평당분양가격')

#pairplot
df_last_notnull = df_last.loc[df_last['평당분양가격'].notnull(),['연도', '월', '지역명', '평당분양가격', '전용면적']]
sns.pairplot(df_last_notnull, hue='지역명')

#2013-2015년 데이터 전처리
df_first.head(5)

#결측치 확인
df_first.isnull().sum()

### melt로 data 만들기(녹이기)
# melt를 이용해서 데이터의 형태 변경할 수 있다.
# df_first변수에 담긴 데이터프레임 != df_last에 담겨있는 데이터프레임 -> 같은형태로만들어야 데이터 합치기 가능

#melt는 id변수 기준 원래 데이터 프레임에 있던 여러개의 컬럼을 variable에 길게 쌓고(중요)
#value 컬럼에 id컬럼과 variable에 해당하는 값을 넣어주는 식으로 데이터를 재구조화한다.

df_first.melt(id_vars='지역')

df_first_melt = df_first.melt(id_vars='지역', var_name='기간', value_name='평당분양가격')
df_first_melt

##기간을 연도와 월로 분리기
#프로그래밍 : 기능만들기 -> 그걸만들기 위한 로직 작성-> 만들고싶으 ㄴ기능 : 기간, 연도, 월 분리 기능

def parse_year(date):
  year = date.split('년')[0]
  return int(year)

def parse_month(date):
  month = date.split('년')[1].replace('월','')
  return int(month)

df_first_melt['연도']=df_first_melt['기간'].apply(parse_year)
df_first_melt['월']=df_first_melt['기간'].apply(parse_month)
df_first_melt

#22-02-22

